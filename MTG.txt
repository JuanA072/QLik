
// Set parameters
let vMaxPages = 1000; // Just a back-stop
let iRefresh = 1;   // Set to 1 to get data from API or 0 from QVD, if available - Set to 1 to load all MTG data this takes some time to complete!


// Record start time
let vLastLoadStart = now();


// Go to the API and get some fresh data
LIB CONNECT TO 'GenericGET';

// Decide whether to get from MTG API or QVD
if iRefresh = 1 or alt(filesize('$(vQVDs)MagicCards.qvd'), 0) = 0 then

    // Initalise some variables
    let vRows = 0;
    let vPriorRows = -1;
    let iPage = 0;

    // Loop for each page of data
    do while vRows <> vPriorRows and iPage < vMaxPages
    
      // Track pages
      let iPage = iPage + 1;
      let vPriorRows = vRows;
      
        // Load details of Magic Sets
        MagicSets:
        LOAD
            1                                      as Sets,
            code                                   as [Set Code],
            name                                   as [Set Name],
            Capitalize(type)                       as [Set Type],
            Date(Date#(releaseDate,
                 'YYYY-MM-DD'), 'DD MMM YYYY')     as [Release Date],
            block                                  as [Set Block]
            ;
        SQL SELECT 
            "code",
            "name",
            "type",
            "block",
            "releaseDate"
        FROM JSON (wrap off) "sets" PK "__KEY_sets"
          WITH CONNECTION (
              URL "https://api.magicthegathering.io/v1/sets",
              QUERY "page" "$(iPage)"
      )
      ;

      let vRows = Alt(NoOfRows('MagicSets'), 0);
    loop
       
     // Create mapping tables from Sets Data
     STORE MagicSets INTO [$(vQVDs)MagicSets.qvd] (qvd);
    
    Map_SetDate:
    MAPPING LOAD [Set Code], [Release Date] RESIDENT MagicSets;

    Map_SetType:
    MAPPING LOAD [Set Code], capitalize(replace([Set Type], '_', ' ')) as st RESIDENT MagicSets;

    Map_SetBlock:
    MAPPING LOAD [Set Code], [Set Block] RESIDENT MagicSets WHERE [Set Block] <> '' and (not IsNull([Set Block]));
    
    DROP TABLE MagicSets;
    
    Map_CardGroup:
    MAPPING LOAD
        upper(Type),
        Group
    FROM [$(vMetaData)]
    (ooxml, embedded labels, table is Group)
    WHERE len(Group) > 0;

    // Initalise some variables again
    let vRows = 0;
    let vPriorRows = -1;
    let iPage = 0;

    // Loop for each page of data
    do while vRows <> vPriorRows and iPage < vMaxPages

      // Track pages
      let iPage = iPage + 1;
      let vPriorRows = vRows;

      // Load the data from the API and transform it
      MagicCards:
      LOAD
          ApplyMap('Map_CardGroup', upper(Type), 'Other') as Group,
          *,
          Year(Date)                          as Year,
          Date(MonthStart(Date),
                                'MMM-YY')     as Month,
          Month(Date)                         as [Month Name],
          Floor(Year(Date)/10)*10             as Decade,
          if(index(lower(Type),
                    'creature') > 0,
                            'Yes', 'No')      as [Is Creature],
          if(match(lower([Set Type]),
                    'expansion',
                'core',
                'masters',
                'commander') > 0,
                          'Yes', 'No')        as [Standard Set]
          ;
      LOAD
          1                                   as Cards,
          number                              as Number,
          keepchar(
                    number, '0123456789')     as NumberInt,
          name                                as Name,
          manaCost                            as [Mana Cost],
          cmc                                 as CMC,
          type                                as [Full Type],
          SubField(type, ' — ', 1)            as Type,
          if(index(type, ' — ') = 0,
                    type,
               SubField(type, ' — ', 2))      as [Sub Type],
          rarity                              as Rarity,
          set                                 as Set,
          ApplyMap('Map_SetDate', set, 
             Date(monthstart(addmonths(today(),1)), 'DD MMM YYYY')) as Date,
          ApplyMap('Map_SetBlock', set, 
                                   'None')    as [Set Block],
          ApplyMap('Map_SetType', set, 
                                   'Other')   as [Set Type],
    //      text,
          supertypes                              as Supertype,
          artist                                  as Artist,
          capitalize(replace(layout, '_', ' '))   as Layout,
          multiverseid                            as Multiverse,
          imageUrl                                as URL,
    //      originalText,
          originalType                            as [Original Type],
 //         flavor                            as Flavour,
          power                                   as Power,
          toughness                               as Toughness,
          setName                                 as [Set Name],
          $(iPage)                                as [API Page]
 //         WHERE NOT IsNull(multiverseid)
          ;
      SQL SELECT 
          "name",
          "manaCost",
          "cmc",
          "type",
          "supertypes",
          "rarity",
          "set",
          "setName",
    //      "text",
          "artist",
          "number",
          "layout",
          "multiverseid",
          "imageUrl",
    //      "originalText",
          "originalType",
    //      "flavor",
          "power",
          "toughness"
      FROM JSON (wrap off) "cards" PK "__KEY_cards"
      WITH CONNECTION (
          URL "https://api.magicthegathering.io/v1/cards",
          QUERY "language" "english",
          QUERY "page" "$(iPage)"
      )
      ;

      let vRows = Alt(NoOfRows('MagicCards'), 0);
    loop

     // Write our QVD to save polling the API in future
    STORE MagicCards INTO [$(vQVDs)MagicCards.qvd] (qvd);
else
        // Get some pre-canned data
        MagicCards:
        LOAD
             *
        FROM [$(vQVDs)MagicCards.qvd] (qvd)
        // removing some outliers - comment this out for true data
        //WHERE alt(Toughness, 0) < 50 and alt(CMC, 0) < 10000
             // and limiting the age to make a smaller app for distribution
             //AND Year >= 2019
        ;
end if


if alt(NoOfRows('MagicCards'), 0) > 0 then

Cards:
LOAD DISTINCT
    Name,
    ceil(rand()*150) as CountryID
RESIDENT MagicCards
;

LEFT JOIN (Cards)
LOAD
    RowNo()                              as CountryID,
    name                                 as Country,
    GeoMakePoint(latitude,longitude)     as [Country Point],
    capitalCity                          as City,
    GeoMakePoint(latitude,longitude)     as [City Point]
    WHERE name <> '' and capitalCity <> '' and latitude <> '' and index(name, ' ') = 0 and name <> 'World'
    ;
SQL SELECT 
     (SELECT 
          "name",
          "capitalCity",
          "longitude",
          "latitude"
     FROM "country" PK "__KEY_country" FK "__FK_country")
FROM XML "countries" PK "__KEY_countries"WITH CONNECTION (
  URL "http://api.worldbank.org/v2/country?per_page=350"
);

end if

// Clear variables
let vMaxPages   = ;
let iRefresh    = ;
let vRows       = ;
let vPriorRows  = ;
let iPage       = ;



